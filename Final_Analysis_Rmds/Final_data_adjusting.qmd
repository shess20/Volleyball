---
title: "Adjusting the Data (Copy)"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
library(dplyr)
library(magrittr)

# reading in Cassie's data
playByPlay <- read.csv("data/play_by_playFINAL3.csv")
boxscores <-  read.csv("data/boxscoresFINAL.csv")
perSet <- read.csv("data/per_set_statsNew.csv")
```

```{r}
# Create new columns ace, error, and kill
newPlayByPlay <- playByPlay %>%
  mutate(ace = grepl("ace", play_descripton, ignore.case = TRUE),
         error = grepl("error", play_descripton, ignore.case = TRUE),
         kill = grepl("kill", play_descripton, ignore.case = TRUE))
newPlayByPlay <- newPlayByPlay %>% 
  filter(ace == TRUE | error == TRUE | kill == TRUE)

# Convert 'ace', 'error', and 'kill' columns to binary indicators (1 if true, 0 if false)
newPlayByPlay$ace_indicator <- as.numeric(newPlayByPlay$ace)
newPlayByPlay$error_indicator <- as.numeric(newPlayByPlay$error)
newPlayByPlay$kill_indicator <- as.numeric(newPlayByPlay$kill)

```

```{r}
# Add new columns to the existing data
newPlayByPlay <- newPlayByPlay %>%
  arrange(set, Date, Site) %>%  # Sort the data for correct order
  group_by(set, Date, Site) %>%
  mutate(
    play = row_number(),
    previous_score_home = lag(home_team_score, default = first(home_team_score)),
    previous_score_visiting = lag(visiting_team_score, default = first(visiting_team_score)),
    point_scored_by = case_when(
      home_team_score > previous_score_home ~ 'Home Team',
      visiting_team_score > previous_score_visiting ~ 'Visiting Team',
      TRUE ~ 'No Point'
    )
  )



```

```{r}
newPlayByPlay <- newPlayByPlay %>%
  mutate(point_scored = case_when(
     ace_indicator == 1 ~ 'ace',
     error_indicator == 1 ~ 'error',
     kill_indicator == 1  ~ 'other'
    )
  )

newPlayByPlay <- newPlayByPlay %>%
  mutate(prev_point_scored = lag(point_scored, default = "other"))
```

```{r}
adjusted_data <- newPlayByPlay %>% 
  select(point_scored, prev_point_scored, set, Date, Site, point_scored_by)
```

```{r}
adjusted_data <- adjusted_data %>%
  group_by(point_scored, prev_point_scored) %>%
  tally()
```

```{r}
#adjusted_data <- adjusted_data %>% 
 # mutate(count = case_when(
    #prev_point_scored == "ace" & point_scored == "ace" ~ 'a.ace', 
    #prev_point_scored == "ace" & point_scored != "ace" ~ 'na.ace',
    #prev_point_scored == "na" & point_scored == "ace" ~ 'a.neutral', 
    #prev_point_scored == "na" & point_scored != "ace" ~ 'na.neutral', 
    #prev_point_scored != "ace" & point_scored == "ace" ~ 'a.noace', 
    #prev_point_scored != "ace" & point_scored != "ace" ~ 'na.noace'
  #))

```

```{r, warning=FALSE}
loglik <- function(x, a.abias, na.abias, a.ebias, na.ebias, a.obias, na.obias, e.abias, ne.abias, e.ebias, ne.ebias, e.obias, ne.obias, o.abias, no.abias, o.ebias, no.ebias, o.obias, no.obias)
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # pb.n is the first entry of x
  ps.abias = x[2] # pb.bbias is the second entry of x
  ps.ebias = x[3] # pb.gbias is the third entry of x'
  
  loglik = a.abias*log(ps.abias)+na.abias*log(1-ps.abias) + 
    e.abias*log(ps.abias) + ne.abias*log(1-ps.abias) + 
    o.abias*log(ps.abias) + no.abias*log(1-ps.abias) + 
    a.ebias*log(ps.ebias)+na.ebias*log(1-ps.ebias) + 
    e.ebias*log(ps.ebias) + ne.ebias*log(1-ps.ebias) + 
    o.ebias*log(ps.ebias) + no.ebias*log(1-ps.ebias) + 
    a.obias*log(ps.obias)+na.obias*log(1-ps.obias) + 
    e.obias*log(ps.obias) + ne.abias*log(1-ps.obias) + 
    o.obias*log(ps.obias) + no.ebias*log(1-ps.obias)
  
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

result <- optim(par = c(.5,.5,.5), # equally likely to be boy girl or neutral
      loglik,
      a.abias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n),
      na.abias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
      e.abias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "ace"))$n),
      ne.abias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "ace"))$n),
      no.abias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "ace"))$n),
      o.abias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "ace"))$n),
      a.ebias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "error"))$n),
      na.ebias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "error"))$n),
      e.ebias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
      ne.ebias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
      o.ebias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "error"))$n),
      no.ebias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "error"))$n),
      a.obias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n),
      na.obias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
      e.obias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
      ne.obias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
      o.obias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "other"))$n),
      no.obias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "other"))$n),
      method="BFGS")


result

```

```{r, warning=FALSE}
loglik <- function(x, a.abias, a.obias, na.abias, na.obias)
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # the first entry of x
  ps.abias = x[2] # the second entry of x
  
  loglik = a.abias*log(ps.abias)+na.abias*log(1-ps.abias) + 
    a.obias*log(ps.obias) + na.obias*log(1-ps.obias)
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

adjusted_data2 <- adjusted_data %>%
  mutate(prev_point_scored = case_when(
    prev_point_scored == "error" ~ "other",
    TRUE ~ prev_point_scored
  ))

a <- optim(par = c(.5,.5), 
      loglik, a.abias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n),
      na.abias =sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
      a.obias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n), na.obias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
      method="BFGS")

a

```

```{r, warning=FALSE}
loglik <- function(x, e.ebias, e.obias, ne.ebias, ne.obias)
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # the first entry of x
  ps.ebias = x[2] # the second entry of x
  
  loglik = e.ebias*log(ps.ebias)+ne.ebias*log(1-ps.ebias) + 
    e.obias*log(ps.obias) + ne.obias*log(1-ps.obias)
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

adjusted_data2 <- adjusted_data %>%
  mutate(prev_point_scored = case_when(
    prev_point_scored == "ace" ~ "other",
    TRUE ~ prev_point_scored
  ))

e <- optim(par = c(.5, .5), 
      loglik, e.ebias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
      ne.ebias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
      e.obias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
      ne.obias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
      method="BFGS")

e
```

```{r}

# Define the log-likelihood function for the independent model
loglik_independent_ace <- function(x, ace_abias, not_ace_abias) {
  ps_ace = x[1]  # Probability of an ace event
  loglik = ace_abias * log(ps_ace) + not_ace_abias * log(1 - ps_ace)
  return(-loglik)  # Return negative log-likelihood for optimization
}

# Fit the independent model using optim
independent_model_ace <- optim(par = 0.5,  # Initial guess for the probability of an ace event
                            loglik_independent_ace,
                            ace_abias = sum((adjusted_data %>% filter(point_scored == "ace"))$n),
                            not_ace_abias = sum((adjusted_data %>% filter(point_scored != "ace"))$n),
                            method = "BFGS")

# Calculate the log-likelihood for the independent model
loglik_independent_model_ace <- -independent_model_ace$value

# Print the result
cat("Log-likelihood for the independent model:", loglik_independent_model_ace, "\n")

```

```{r}

# Define the log-likelihood function for the independent model
loglik_independent_error<- function(x, e_ebias, ne_ebias) {
  ps_error = x[1]  # Probability of an ace event
  loglik = e_ebias * log(ps_error) + ne_ebias * log(1 - ps_error)
  return(-loglik)  # Return negative log-likelihood for optimization
}

# Fit the independent model using optim
independent_model_error <- optim(par = 0.5,  # Initial guess for the probability of an ace event
                            loglik_independent_error,
                            e_ebias = sum((adjusted_data %>% filter(point_scored == "error"))$n),
                            ne_ebias = sum((adjusted_data %>% filter(point_scored != "error"))$n),
                            method = "BFGS")

# Calculate the log-likelihood for the independent model
loglik_independent_model_error <- -independent_model_error$value

# Print the result
cat("Log-likelihood for the independent model:", loglik_independent_model_error, "\n")

```

\# Define the log-likelihood function for the independent model

loglik_independent_full\<- function(x, e_ebias, ne_ebias, a_abias, na_abias, o_obias, no_obias) {

ps_error = x\[1\]

ps_ace = x\[2\] \# Probability of an ace event

ps_other = x\[3\]

loglik = e_ebias \* log(ps_error) + ne_ebias \* log(1 - ps_error) +a_abias \* log(ps_ace) + na_abias \* log(1 - ps_ace) + o_obias \* log(ps_other) + no_obias \* log(1 - ps_other)

return(-loglik) \# Return negative log-likelihood for optimization

}

\# Fit the independent model using optim

independent_model_full \<- optim(par = c(.5, .5, 0.5), \# Initial guess for the probability of an ace event

loglik_independent_full,

a_abias = sum((adjusted_data %\>% filter(point_scored == "ace"))\$n),

na_abias = sum((adjusted_data %\>% filter(point_scored != "ace"))\$n),

e_ebias = sum((adjusted_data %\>% filter(point_scored == "error"))\$n),

ne_ebias = sum((adjusted_data %\>% filter(point_scored != "error"))\$n),

o_obias = sum((adjusted_data %\>% filter(point_scored == "other"))\$n),

no_obias = sum((adjusted_data %\>% filter(point_scored != "other"))\$n),

method = "BFGS")

\# Calculate the log-likelihood for the independent model

loglik_independent_model_full \<- -independent_model_full\$value

\# Print the result

cat("Log-likelihood for the independent model:", loglik_independent_model_full, "\\n")

```{r}

# Define the log-likelihood function for the independent model
loglik_independent_full<- function(x, e_ebias, ne_ebias, a_abias, na_abias, o_obias, no_obias) {
  ps_error = x[1] 
  ps_ace = x[2] # Probability of an ace event
  ps_other = x[3]
  loglik = e_ebias * log(ps_error) + ne_ebias * log(1 - ps_error) +a_abias * log(ps_ace) + na_abias * log(1 - ps_ace) + o_obias * log(ps_other) + no_obias * log(1 - ps_other)
  return(-loglik)  # Return negative log-likelihood for optimization
}

# Fit the independent model using optim
independent_model_full <- optim(par = c(.5, .5, 0.5),  # Initial guess for the probability of an ace event
                            loglik_independent_full,
                            a_abias = sum((adjusted_data %>% filter(point_scored == "ace"))$n),
                            na_abias = sum((adjusted_data %>% filter(point_scored != "ace"))$n),
                            e_ebias = sum((adjusted_data %>% filter(point_scored == "error"))$n),
                            ne_ebias = sum((adjusted_data %>% filter(point_scored != "error"))$n),
                            o_obias = sum((adjusted_data %>% filter(point_scored == "other"))$n),
                            no_obias = sum((adjusted_data %>% filter(point_scored != "other"))$n),
                            method = "BFGS")

# Calculate the log-likelihood for the independent model
loglik_independent_model_full <- -independent_model_full$value

# Print the result
cat("Log-likelihood for the independent model:", loglik_independent_model_full, "\n")

```
