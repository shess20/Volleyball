---
title: "Adjusting the Data"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
library(dplyr)
library(magrittr)

# reading in Cassie's data
playByPlay <- read.csv("data/play_by_playFINAL3.csv")
boxscores <-  read.csv("data/boxscoresFINAL.csv")
perSet <- read.csv("data/per_set_statsNew.csv")

```

```{r}
# Create new columns ace, error, and kill
newPlayByPlay <- playByPlay %>%
  group_by(set, Date, Site) %>%
  mutate(ace = grepl("ace", play_descripton, ignore.case = TRUE),
         error = grepl("error", play_descripton, ignore.case = TRUE),
         kill = grepl("kill", play_descripton, ignore.case = TRUE))
newPlayByPlay <- newPlayByPlay %>% 
  filter(ace == TRUE | error == TRUE | kill == TRUE)

# Convert 'ace', 'error', and 'kill' columns to binary indicators (1 if true, 0 if false)
newPlayByPlay$ace_indicator <- as.numeric(newPlayByPlay$ace)
newPlayByPlay$error_indicator <- as.numeric(newPlayByPlay$error)
newPlayByPlay$kill_indicator <- as.numeric(newPlayByPlay$kill)

```

```{r}
# Add new columns to the existing data
newPlayByPlay <- newPlayByPlay %>%
  arrange(set, Date, Time) %>%  # Sort the data for correct order
  group_by(set, Date, Site) %>%
  mutate(
    play = row_number(),
    previous_score_home = lag(home_team_score, default = first(home_team_score)),
    previous_score_visiting = lag(visiting_team_score, default = first(visiting_team_score)),
    point_scored_by = case_when(
      home_team_score > previous_score_home ~ 'Home Team',
      visiting_team_score > previous_score_visiting ~ 'Visiting Team',
      TRUE ~ 'No Point'
    )
  )



```

```{r}

newPlayByPlay <- newPlayByPlay %>%
  mutate(point_scored = case_when(
     ace_indicator == 1 ~ 'ace',
     error_indicator == 1 ~ 'error',
     kill_indicator == 1  ~ 'other'
    ),
    prev_point_scored = lag(point_scored, default = NA)
  )

adjusted_data <- newPlayByPlay %>% 
  select(point_scored, prev_point_scored, set, Date, Site, point_scored_by) %>%
  group_by(point_scored, prev_point_scored, set, Date, Site) %>%
  tally()

# Check if adjusted_data has any rows
if (nrow(adjusted_data) > 0) {
  adjusted_data1 <- adjusted_data %>%
    filter(Date == grepl("2013-08-30", Date, ignore.case = TRUE) & 
           Site == grepl("Center Valley", Site, ignore.case = TRUE))

  # Continue with the optimization only if adjusted_data1 has rows
  if (nrow(adjusted_data1) > 0) {
    # Your remaining code for optim...
    optim(par = c(.5, .5, .5),
          loglik,
          a.abias = (adjusted_data1 %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n,
          na.abias = sum((adjusted_data1 %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
          # ... other parameters ...
          method = "BFGS")
  } else {
    print("No data matching the filtering conditions for adjusted_data1.")
  }
} else {
  print("No data in adjusted_data.")
}

```

```{r}
#adjusted_data <- adjusted_data %>% 
 # mutate(count = case_when(
    #prev_point_scored == "ace" & point_scored == "ace" ~ 'a.ace', 
    #prev_point_scored == "ace" & point_scored != "ace" ~ 'na.ace',
    #prev_point_scored == "na" & point_scored == "ace" ~ 'a.neutral', 
    #prev_point_scored == "na" & point_scored != "ace" ~ 'na.neutral', 
    #prev_point_scored != "ace" & point_scored == "ace" ~ 'a.noace', 
    #prev_point_scored != "ace" & point_scored != "ace" ~ 'na.noace'
  #))

```

```{r, warning=FALSE}
loglik <- function(x, a.abias, na.abias, e.abias, ne.abias, o.abias, no.abias, a.ebias, na.ebias, e.ebias, ne.ebias, o.ebias, no.ebias, a.obias, na.obias, e.obias, ne.obias, o.obias, no.obias) {
  ps.obias = x[1]  
  ps.abias = x[2]
  ps.ebias = x[3]

  loglik = a.abias * log(ps.abias) + na.abias * log(1 - ps.abias) +
    e.abias * log(ps.ebias) + ne.abias * log(1 - ps.ebias) +
    o.abias * log(ps.obias) + no.abias * log(1 - ps.obias)

  return(-loglik)
}
#adjusted_data1 <- adjusted_data %>% group_by()
  


optim(par = c(.5,.5,.5), # equally likely to be boy girl or neutral
      loglik,
      a.abias = (adjusted_data1 %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n,
      na.abias = sum((adjusted_data1 %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
      e.abias = sum((adjusted_data1 %>% filter(point_scored == "error" & prev_point_scored == "ace"))$n),
      ne.abias = sum((adjusted_data1 %>% filter(point_scored != "error" & prev_point_scored == "ace"))$n),
      no.abias = sum((adjusted_data1 %>% filter(point_scored != "other" & prev_point_scored == "ace"))$n),
      o.abias = sum((adjusted_data1 %>% filter(point_scored == "other" & prev_point_scored == "ace"))$n),
      a.ebias = sum((adjusted_data1 %>% filter(point_scored == "ace" & prev_point_scored == "error"))$n),
      na.ebias = sum((adjusted_data1 %>% filter(point_scored != "ace" & prev_point_scored == "error"))$n),
      e.ebias = sum((adjusted_data1 %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
      ne.ebias = sum((adjusted_data1 %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
      o.ebias = sum((adjusted_data1 %>% filter(point_scored == "other" & prev_point_scored == "error"))$n),
      no.ebias = sum((adjusted_data1 %>% filter(point_scored != "other" & prev_point_scored == "error"))$n),
      a.obias = sum((adjusted_data1 %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n),
      na.obias = sum((adjusted_data1 %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
      e.obias = sum((adjusted_data1 %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
      ne.obias = sum((adjusted_data1 %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
      o.obias = sum((adjusted_data1 %>% filter(point_scored == "other" & prev_point_scored == "other"))$n),
      no.obias = sum((adjusted_data1 %>% filter(point_scored != "other" & prev_point_scored == "other"))$n),
      method="BFGS")

```

```{r, warning=FALSE}
loglik <- function(x, a.abias, a.obias, na.abias, na.obias)
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # the first entry of x
  ps.abias = x[2] # the second entry of x
  
  loglik = a.abias*log(ps.abias)+na.abias*log(1-ps.abias) + 
    a.obias*log(ps.obias) + na.obias*log(1-ps.obias)
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

optim(par = c(.5,.5,.5), 
      loglik, a.abias = 4830, na.abias = (6211+7729),
      a.obias = (5851 + 8074), na.obias = (20336 + 25422 + 25784 + 35756),
      method="BFGS")


```
