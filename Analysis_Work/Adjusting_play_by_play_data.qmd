---
title: "Adjusting the Data"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
library(dplyr)
library(magrittr)

# reading in Cassie's data
playByPlay <- read.csv("data/play_by_playFINAL3.csv")
boxscores <-  read.csv("data/boxscoresFINAL.csv")
perSet <- read.csv("data/per_set_statsNew.csv")

```

```{r}
# Create new columns ace, error, and kill
newPlayByPlay <- playByPlay %>%
  mutate(ace = grepl("ace", play_descripton, ignore.case = TRUE),
         error = grepl("error", play_descripton, ignore.case = TRUE),
         kill = grepl("kill", play_descripton, ignore.case = TRUE),
         timeout = grepl("timeout", play_descripton, ignore.case = TRUE),
         subs = grepl("subs", play_descripton, ignore.case = TRUE))
#newPlayByPlay <- playByPlay %>%
  #filter(timeout != TRUE)

# Convert 'ace', 'error', and 'kill' columns to binary indicators (1 if true, 0 if false)
newPlayByPlay$ace_indicator <- as.numeric(newPlayByPlay$ace)
newPlayByPlay$error_indicator <- as.numeric(newPlayByPlay$error)
newPlayByPlay$kill_indicator <- as.numeric(newPlayByPlay$kill)

```

p(s\|madebias) \<- made given that previous was made

1 - p(s\|madebias) \<- missed given that previous was made

p(s\|missedbias) \<- made given that previous was missed

1 - p(s\|missedbias) \<- missed given that previous was missed

p(s\|N) \<- made given neutral

1 - p(s\|N) \<- missed given neutral

```{r}
# Add new columns to the existing data
newPlayByPlay <- newPlayByPlay %>%
  arrange(set, Date, Time) %>%  # Sort the data for correct order
  group_by(set, Date, Site) %>%
  mutate(
    play = row_number(),
    previous_score_home = lag(home_team_score, default = first(home_team_score)),
    previous_score_visiting = lag(visiting_team_score, default = first(visiting_team_score)),
    point_scored_by = case_when(
      home_team_score > previous_score_home ~ 'Home Team',
      visiting_team_score > previous_score_visiting ~ 'Visiting Team',
      TRUE ~ 'No Point'
    )
  )



```

```{r}
newPlayByPlay <- newPlayByPlay %>%
  mutate(point_scored = case_when(
     ace_indicator == 1 ~ 'ace',
     error_indicator == 1 ~ 'error',
     kill_indicator == 1  ~ 'other'
    )
  )

newPlayByPlay <- newPlayByPlay %>%
  mutate(prev_point_scored = lag(point_scored, default = first(point_scored)))
```

```{r}
adjusted_data <- newPlayByPlay %>% 
  select(point_scored, prev_point_scored, set, Date, Site, point_scored_by)
```

```{r}
adjusted_data <- adjusted_data %>%
  group_by(point_scored, prev_point_scored, Date, Site, set) %>%
  tally()
```

```{r}
#adjusted_data <- adjusted_data %>% 
 # mutate(count = case_when(
    #prev_point_scored == "ace" & point_scored == "ace" ~ 'a.ace', 
    #prev_point_scored == "ace" & point_scored != "ace" ~ 'na.ace',
    #prev_point_scored == "na" & point_scored == "ace" ~ 'a.neutral', 
    #prev_point_scored == "na" & point_scored != "ace" ~ 'na.neutral', 
    #prev_point_scored != "ace" & point_scored == "ace" ~ 'a.noace', 
    #prev_point_scored != "ace" & point_scored != "ace" ~ 'na.noace'
  #))

```

```{r}
loglik <- function(x, na.abias, a.abias, na.nabias, a.nabias, a.n, na.n)
{ps.n = x[1]  
  ps.abias = x[2] 
  ps.nabias = x[3] 
  loglik = na.n*log(ps.n) + na.n*log(1-ps.n) + 
    ns.sbias*log(ps.sbias) + nm.sbias*log(1-ps.sbias) + 
    ns.mbias*log(ps.mbias) + nm.mbias*log(1-ps.mbias)   
  return(-loglik) 
}

# optim is a minimization function (so need to give is negative log likelihood)
optim(par = c(.5,.5,.5), # equally likely to be boy girl or neutral
      loglik.mod2,ns.n = 29, nm.n = 29,
      ns.sbias = 197, nm.sbias = 246,
      ns.mbias = 244, nm.mbias = 223, 
      method="BFGS")
```
