---
title: "Untitled"
format: html
editor: visual
---
```{r}
# Create new columns ace, error, and kill
newPlayByPlay <- playByPlay %>%
  mutate(ace = grepl("ace", play_descripton, ignore.case = TRUE),
         error = grepl("error", play_descripton, ignore.case = TRUE),
         kill = grepl("kill", play_descripton, ignore.case = TRUE))

# Convert 'ace', 'error', and 'kill' columns to binary indicators (1 if true, 0 if false)
newPlayByPlay$ace_indicator <- as.numeric(newPlayByPlay$ace)
newPlayByPlay$error_indicator <- as.numeric(newPlayByPlay$error)
newPlayByPlay$kill_indicator <- as.numeric(newPlayByPlay$kill)

# Add new columns to the existing data
newPlayByPlay <- newPlayByPlay %>%
  arrange(set, Date, Site) %>%  # Sort the data for correct order
  group_by(set, Date, Site) %>%
  mutate(
    play = row_number(),
    previous_score_home = lag(home_team_score),
    previous_score_visiting = lag(visiting_team_score),
    point_scored_by = case_when(
      play == 1 ~ NA_character_,
      home_team_score > previous_score_home ~ 'Home Team',
      visiting_team_score > previous_score_visiting ~ 'Visiting Team',
      TRUE ~ 'No Point'
    )
  )
newPlayByPlay <- newPlayByPlay %>%
  mutate(point_scored = case_when(
     ace_indicator == 1 ~ 'ace',
     error_indicator == 1 ~ 'error',
     kill_indicator == 1  ~ 'other'
    )
  )

newPlayByPlay <- newPlayByPlay %>%
  mutate(prev_point_scored = lag(point_scored, default = first(point_scored)))

# Extract relevant columns
adjusted_data <- newPlayByPlay %>%
  filter(!is.na(point_scored_by)) %>%
  select(point_scored, set, Date, Site, point_scored_by)

# Group by relevant columns and tally occurrences
adjusted_data <- adjusted_data %>%
  group_by(point_scored_by, point_scored) %>%
  tally()

# Rename columns for clarity
adjusted_data <- adjusted_data %>%
  rename(
    prev_point_scored = point_scored_by,
    count = n
  )

# Remove unnecessary columns
adjusted_data <- adjusted_data %>%
  select(prev_point_scored, point_scored, count)

loglik <- function(x, a.abias, na.abias, a.ebias, na.ebias, a.obias, na.obias, e.abias, ne.abias, e.ebias, ne.ebias, e.obias, ne.obias, o.abias, no.abias, o.ebias, no.ebias, o.obias, no.obias)
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # pb.n is the first entry of x
  ps.abias = x[2] # pb.bbias is the second entry of x
  ps.ebias = x[3] # pb.gbias is the third entry of x'
  
  loglik = a.abias*log(ps.abias)+na.abias*log(1-ps.abias) + 
    e.abias*log(ps.abias) + ne.abias*log(1-ps.abias) + 
    o.abias*log(ps.abias) + no.abias*log(1-ps.abias) + 
    a.ebias*log(ps.ebias)+na.ebias*log(1-ps.ebias) + 
    e.ebias*log(ps.ebias) + ne.ebias*log(1-ps.ebias) + 
    o.ebias*log(ps.ebias) + no.ebias*log(1-ps.ebias) + 
    a.obias*log(ps.obias)+na.obias*log(1-ps.obias) + 
    e.obias*log(ps.obias) + ne.abias*log(1-ps.obias) + 
    o.obias*log(ps.obias) + no.ebias*log(1-ps.obias)
  
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

optim(par = c(.5,.5,.5), # equally likely to be boy girl or neutral
      loglik,
      a.abias = (adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n,
      na.abias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
      e.abias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "ace"))$n),
      ne.abias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "ace"))$n),
      no.abias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "ace"))$n),
      o.abias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "ace"))$n),
      a.ebias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "error"))$n),
      na.ebias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "error"))$n),
      e.ebias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
      ne.ebias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
      o.ebias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "error"))$n),
      no.ebias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "error"))$n),
      a.obias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n),
      na.obias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
      e.obias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
      ne.obias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
      o.obias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "other"))$n),
      no.obias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "other"))$n),
      method="BFGS")

```
```