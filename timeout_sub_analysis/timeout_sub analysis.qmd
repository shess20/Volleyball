---
title: "timeout_sub_analysis"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
library(dplyr)
library(magrittr)

# reading in Cassie's data
playByPlay <- read.csv("data/play_by_playFINAL3.csv")
boxscores <-  read.csv("data/boxscoresFINAL.csv")
perSet <- read.csv("data/per_set_statsNew.csv")
```

```{r}
# Create new columns ace, error, and kill
newPlayByPlay_subs <- playByPlay %>%
  mutate(ace = grepl("ace", play_descripton, ignore.case = TRUE),
         error = grepl("error", play_descripton, ignore.case = TRUE),
         kill = grepl("kill", play_descripton, ignore.case = TRUE), 
         sub = grepl("subs", play_descripton, ignore.case = TRUE), 
         timeout = grepl("Timeout", play_descripton, ignore.case = TRUE))
newPlayByPlay_subs <- newPlayByPlay_subs %>% 
  filter(sub == TRUE | timeout == TRUE |ace == TRUE | error == TRUE | kill == TRUE)

# Convert 'ace', 'error', and 'kill' columns to binary indicators (1 if true, 0 if false)
newPlayByPlay_subs$ace_indicator <- as.numeric(newPlayByPlay_subs$ace)
newPlayByPlay_subs$error_indicator <- as.numeric(newPlayByPlay_subs$error)
newPlayByPlay_subs$kill_indicator <- as.numeric(newPlayByPlay_subs$kill)
newPlayByPlay_subs$sub_indicator <- as.numeric(newPlayByPlay_subs$sub)
newPlayByPlay_subs$timeout_indicator <- as.numeric(newPlayByPlay_subs$timeout)

```

```{r}
# Add new columns to the existing data
newPlayByPlay_subs <- newPlayByPlay_subs %>%
  arrange(set, Date, Site) %>%  # Sort the data for correct order
  group_by(set, Date, Site) %>%
  mutate(
    play = row_number(),
    previous_score_home = lag(home_team_score, default = first(home_team_score)),
    previous_score_visiting = lag(visiting_team_score, default = first(visiting_team_score)),
    point_scored_by = case_when(
      home_team_score > previous_score_home ~ 'Home Team',
      visiting_team_score > previous_score_visiting ~ 'Visiting Team',
      TRUE ~ 'No Point'
    )
  )



```

```{r}
newPlayByPlay_subs <- newPlayByPlay_subs %>%
  mutate(point_scored = case_when(
     ace_indicator == 1 ~ 'ace',
     error_indicator == 1 ~ 'error',
     kill_indicator == 1  ~ 'other',
     sub_indicator == 1 ~ 'sub', 
     timeout_indicator == 1 ~ 'timeout'
    )
  )

newPlayByPlay_subs <- newPlayByPlay_subs %>%
  mutate(prev_point_scored = lag(point_scored, default = "other"))
```

```{r}
adjusted_data <- newPlayByPlay_subs %>% 
  select(point_scored, prev_point_scored, set, Date, Site, point_scored_by)
```

```{r}
adjusted_data <- adjusted_data %>%
  group_by(point_scored, prev_point_scored) %>%
  tally()
```

```{r}
#adjusted_data <- adjusted_data %>% 
 # mutate(count = case_when(
    #prev_point_scored == "ace" & point_scored == "ace" ~ 'a.ace', 
    #prev_point_scored == "ace" & point_scored != "ace" ~ 'na.ace',
    #prev_point_scored == "na" & point_scored == "ace" ~ 'a.neutral', 
    #prev_point_scored == "na" & point_scored != "ace" ~ 'na.neutral', 
    #prev_point_scored != "ace" & point_scored == "ace" ~ 'a.noace', 
    #prev_point_scored != "ace" & point_scored != "ace" ~ 'na.noace'
  #))

```

```{r, warning=FALSE}
loglik <- function(x, a.abias, na.abias, a.ebias, na.ebias, a.obias, na.obias, e.abias, ne.abias, e.ebias, ne.ebias, e.obias, ne.obias, o.abias, no.abias, o.ebias, no.ebias, o.obias, no.obias, a.sbias, na.sbias, e.sbias, ne.sbias, o.sbias, no.sbias, a.tbias, na.tbias, e.tbias, ne.tbias, o.tbias, no.tbias) 
{ # x is a vector containing the parameter values
  ps.obias = x[1]  # pb.n is the first entry of x
  ps.abias = x[2] # pb.bbias is the second entry of x
  ps.ebias = x[3] # pb.gbias is the third entry of x'
  ps.sbias = x[4]
  ps.tbias = x[5]
  
  loglik =
    a.abias*log(ps.abias) + na.abias*log(1-ps.abias) + 
    e.abias*log(ps.abias) + ne.abias*log(1-ps.abias) +  
    o.abias*log(ps.abias) + no.abias*log(1-ps.abias) + 
    a.ebias*log(ps.ebias) + na.ebias*log(1-ps.ebias) + 
    e.ebias*log(ps.ebias) + ne.ebias*log(1-ps.ebias) + 
    o.ebias*log(ps.ebias) + no.ebias*log(1-ps.ebias) + 
    a.obias*log(ps.obias) + na.obias*log(1-ps.obias) + 
    e.obias*log(ps.obias) + ne.obias*log(1-ps.obias) + 
    o.obias*log(ps.obias) + no.obias*log(1-ps.obias) + 
    a.sbias*log(ps.sbias) + na.sbias*log(1-ps.sbias) + 
    e.sbias*log(ps.sbias) + ne.sbias*log(1-ps.sbias) + 
    o.sbias*log(ps.sbias) + no.sbias*log(1-ps.sbias) + 
    a.tbias*log(ps.tbias) + na.tbias*log(1-ps.tbias) + 
    e.tbias*log(ps.tbias) + ne.tbias*log(1-ps.tbias) + 
    o.tbias*log(ps.tbias) + no.tbias*log(1-ps.tbias)
  
  return(-loglik) # optim is a minimization function (so need to give is negative log likelihood)
}

result_full_with_timeout_and_sub <- optim(par = c(.5,.5,.5,.5,.5), # equally likely to be boy girl or neutral
      loglik,
      a.abias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n),
      na.abias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
      e.abias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "ace"))$n),
      ne.abias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "ace"))$n),
      no.abias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "ace"))$n),
      o.abias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "ace"))$n),
      a.ebias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "error"))$n),
      na.ebias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "error"))$n),
      e.ebias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
      ne.ebias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
      o.ebias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "error"))$n),
      no.ebias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "error"))$n),
      a.obias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n),
      na.obias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
      e.obias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
      ne.obias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
      o.obias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "other"))$n),
      no.obias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "other"))$n),
      a.sbias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "sub"))$n),
      na.sbias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "sub"))$n),
      e.sbias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "sub"))$n),
      ne.sbias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "sub"))$n),
      o.sbias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "sub"))$n),
      no.sbias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "sub"))$n),
      a.tbias = sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "timeout"))$n),
      na.tbias = sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "timeout"))$n),
      e.tbias = sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "timeout"))$n),
      ne.tbias = sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "timeout"))$n),
      o.tbias = sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "timeout"))$n),
      no.tbias = sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "timeout"))$n), method="BFGS")
      


result_full_with_timeout_and_sub

```


```{r}
loglik_independent_full <- function(x, p_bias) {
  # Ensure x is within the valid range (0 to 1)
  x <- pmax(pmin(x, 0.999999), 0.000001)
  
  # Calculate the log-likelihood
  loglik = sum(p_bias * log(x) + (1 - p_bias) * log(1 - x))
  
  # Check for non-finite values
  if (any(!is.finite(loglik))) {
    return(NA)  # Return NA if non-finite values are encountered
  }
  
  return(-loglik)
}


p_bias <- c(
  sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "ace"))$n),
  sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "error"))$n),
  sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "other"))$n),
  sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "sub"))$n),
  sum((adjusted_data %>% filter(point_scored == "ace" & prev_point_scored == "timeout"))$n),
  sum((adjusted_data %>% filter(point_scored != "ace" & prev_point_scored == "timeout"))$n),
  sum((adjusted_data %>% filter(point_scored == "error" & prev_point_scored == "timeout"))$n),
  sum((adjusted_data %>% filter(point_scored != "error" & prev_point_scored == "timeout"))$n),
  sum((adjusted_data %>% filter(point_scored == "other" & prev_point_scored == "timeout"))$n),
  sum((adjusted_data %>% filter(point_scored != "other" & prev_point_scored == "timeout"))$n)
)

result_independent_full <- optim(par = 0.5, # Initial guess for probability
                             loglik_independent_full,
                             p_bias = p_bias,
                             method = "BFGS")

# The optimized parameter value for the independent model
result_independent_full$par
```